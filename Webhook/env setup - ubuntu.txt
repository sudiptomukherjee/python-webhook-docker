SSH:
.........
ssh -i keys/vm-ub-key.pem azureuser@4.227.162.18

install docker:
...............
sudo apt update
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install -y docker-ce

docker --version

sudo usermod -aG docker ${USER}

docker run hello-world

clone git repo:
................
git clone https://<PAT>@<repository_URL>
e.g.:
git clone https://<PAT>a@dev.azure.com/tcsteg1/_git/demoproject1

docker build:
...............
docker build -t webhook:v3 .
docker run -d -p 5000:5000 webhook:v1
-- run by injecting the token as env var
docker run -e GITHUB_TOKEN=<git_token> webhook:v1

test:
curl -X POST -H "Content-Type: application/json" -d '{"maxMemory": 256}' http://172.17.0.2:5000/webhook

install kubectl:
......................
sudo apt update
sudo apt-get install -y apt-transport-https ca-certificates curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt-get install -y kubectl
kubectl version --client

install KinD:
.............
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.12.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/
kind version
-- create cluster
kind create cluster --name my-cluster --config kind-config.yaml
-- verify
kind get clusters
kubectl cluster-info --context kind-my-cluster


Kubernetes setup:
..................
-- create the secret for token
kubectl create secret generic github-token-secret --from-literal=GITHUB_TOKEN=<token>
-- load docker image into kind and apply deployment into kind:
kind load docker-image webhook:v2 --name my-cluster
-- check if loaded
docker exec -it my-cluster-control-plane bash
crictl images
exit
-- apply deployment and svc yamls
apply deployment.yaml
apply service.yaml

-- port forward for exposing the svc for access outside cluster:
kubectl port-forward svc/webhook-service 8080:80
	Forwarding from 127.0.0.1:8080 -> 5000
	Forwarding from [::1]:8080 -> 5000
	Handling connection for 8080

run curl on another terminal session:
curl -X POST -H "Content-Type: application/json" -d '{"maxMemory": 200}' http://localhost:8080/webhook

quick redeploy and test:
.........................
docker build -t webhook:v12 .
kind load docker-image webhook:v12 --name my-cluster
kubectl apply -f deployment.yaml

-- check if pod starts
kubectl get pods
-- container logs
kubectl logs <pod> -c webhook-container
-- pod logs 
kubectl logs <pod>

kubectl port-forward svc/webhook-service 8080:80
curl -X POST -H "Content-Type: application/json" -d '{"maxMemory": 350}' http://localhost:8080/webhook